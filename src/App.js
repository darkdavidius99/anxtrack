import { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";

export default function AnxtrackApp() {
  const [step, setStep] = useState("home");
  const [customPlan, setCustomPlan] = useState("");
  const [supportResult, setSupportResult] = useState(null);
  const [countdown, setCountdown] = useState(60);
  const [breathingStarted, setBreathingStarted] = useState(false);
  const [selfTalkText, setSelfTalkText] = useState("");
  const [thoughtText, setThoughtText] = useState("");
  const [microTimer, setMicroTimer] = useState(60);
  const [microStarted, setMicroStarted] = useState(false);
  const [selectedPlan, setSelectedPlan] = useState("");
  const [activityLog, setActivityLog] = useState([]);

  useEffect(() => {
    let timer;
    if (breathingStarted && countdown > 0) {
      timer = setTimeout(() => setCountdown(countdown - 1), 1000);
    }
    return () => clearTimeout(timer);
  }, [breathingStarted, countdown]);

  useEffect(() => {
    let timer;
    if (microStarted && microTimer > 0) {
      timer = setTimeout(() => setMicroTimer((prev) => {
        if (prev === 1) {
          setMicroStarted(false);
          setMicroTimer(60);
        }
        return prev - 1;
      }), 1000);
    }
    return () => clearTimeout(timer);
  }, [microStarted, microTimer]);

  const handleBack = () => {
    if (step === "micro_timer") {
      setMicroStarted(false);
      setMicroTimer(60);
    }
    setStep("support");
  };
  const updateSelfTalk = (text) => setSelfTalkText(text);

  if (step === "support") {
    return (
      <div className="p-6 flex flex-col items-center gap-4">
        <h2 className="text-xl font-bold">–•–æ—á–µ—à—å –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥–¥–µ—Ä–∂–∫–∏?</h2>
        <div className="flex flex-col gap-3 w-full max-w-sm">
          <Button variant="outline" onClick={() => setStep("breathing")}>–ü–æ–¥—ã—à–∞—Ç—å 60 —Å–µ–∫—É–Ω–¥</Button>
          <Button variant="outline" onClick={() => setStep("microplan")}>–°–¥–µ–ª–∞—Ç—å –º–∏–∫—Ä–æ-–ø–ª–∞–Ω</Button>
          <Button variant="outline" onClick={() => setStep("selftalk")}>–°–∫–∞–∑–∞—Ç—å —Å–µ–±–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</Button>
        </div>
        <Button variant="link" onClick={() => setStep("home")}>–ù–µ—Ç, –ø—Ä–æ—Å—Ç–æ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–µ–≤–æ–≥—É</Button>
      </div>
    );
  }

  if (step === "breathing") {
    return (
      <div className="p-6 flex flex-col items-center gap-4">
        <h2 className="text-xl font-bold">–ü–æ–¥—ã—à–∏–º 60 —Å–µ–∫—É–Ω–¥</h2>
        <div className="rounded-full w-48 h-48 bg-purple-200 flex items-center justify-center text-3xl">
          {countdown}
        </div>
        <p className="text-sm text-gray-500 text-center">–°–ª–µ–¥—É–π —Ä–∏—Ç–º—É: 4 —Å–µ–∫—É–Ω–¥—ã –≤–¥—ã—Ö–∞–µ–º –Ω–æ—Å–æ–º, 7 —Å–µ–∫—É–Ω–¥ –∑–∞–¥–µ—Ä–∂–∏–≤–∞–µ–º –¥—ã—Ö–∞–Ω–∏–µ, 8 —Å–µ–∫—É–Ω–¥ –≤—ã–¥—ã—Ö–∞–µ–º —Ä—Ç–æ–º</p>
        {!breathingStarted ? (
          <Button onClick={() => setBreathingStarted(true)}>–ù–∞—á–∞—Ç—å –¥—ã—Ö–∞–Ω–∏–µ</Button>
        ) : (
          <Button onClick={() => {
            setCountdown(60);
            setBreathingStarted(false);
            setActivityLog((prev) => [...prev, { time: new Date().toLocaleTimeString(), text: "–ó–∞–≤–µ—Ä—à–µ–Ω–æ –¥—ã—Ö–∞–Ω–∏–µ" }]);
            setStep("result");
          }}>–ó–∞–≤–µ—Ä—à–∏—Ç—å</Button>
        )}
        <Button variant="link" onClick={handleBack}>–ù–∞–∑–∞–¥</Button>
      </div>
    );
  }

  if (step === "result") {
    return (
      <div className="p-6 flex flex-col gap-4 items-center">
        <h2 className="text-xl font-bold">–ö–∞–∫ —Ç—ã —Å–µ–±—è —Å–µ–π—á–∞—Å —á—É–≤—Å—Ç–≤—É–µ—à—å?</h2>
        <div className="flex gap-4">
          <Button onClick={() => {
            setSupportResult("good");
            setStep("home");
          }}>üëç –ü–æ–º–æ–≥–ª–æ</Button>
          <Button onClick={() => {
            setSupportResult("bad");
            setStep("home");
          }}>üëé –ù–µ –æ—á–µ–Ω—å</Button>
        </div>
        <Button onClick={() => setStep("home")} className="mt-4">–ù–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω</Button>
      </div>
    );
  }

  if (step === "microplan") {
    return (
      <div className="p-6 flex flex-col items-center gap-6">
        <h2 className="text-xl font-bold">–°–¥–µ–ª–∞–π –º–∏–∫—Ä–æ-–ø–ª–∞–Ω</h2>
        <p className="text-sm text-gray-500">–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ</p>
        <div className="flex flex-col gap-2 w-full max-w-sm">
          <Button onClick={() => setStep("micro_thought")}>–ù–∞–ø–∏—Å–∞—Ç—å 1 –º—ã—Å–ª—å, –∫–æ—Ç–æ—Ä–∞—è —Ç—Ä–µ–≤–æ–∂–∏—Ç</Button>
          <Button onClick={() => setStep("micro_timer")}>–í—ã–π—Ç–∏ –Ω–∞ –±–∞–ª–∫–æ–Ω –∏ –ø–æ–¥—ã—à–∞—Ç—å</Button>
          <Button onClick={() => setStep("micro_timer")}>–°–¥–µ–ª–∞—Ç—å —Å–µ–±–µ —á–∞–π</Button>
          <Button onClick={() => setStep("micro_timer")}>–ü—Ä–æ—Ç–µ—Ä–µ—Ç—å —Å—Ç–æ–ª</Button>
          <Button onClick={() => setStep("micro_timer")}>–í–∫–ª—é—á–∏—Ç—å —Å–ø–æ–∫–æ–π–Ω—É—é –º—É–∑—ã–∫—É</Button>
        </div>
        <Input className="mt-4" placeholder="–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç..." value={customPlan} onChange={(e) => setCustomPlan(e.target.value)} />
        {customPlan.trim() !== "" && <Button className="mt-2" onClick={() => setStep("result")}>–î–∞–ª—å—à–µ</Button>}
        <Button variant="link" onClick={handleBack}>–ù–∞–∑–∞–¥</Button>
      </div>
    );
  }

  if (step === "micro_thought") {
    return (
      <div className="p-6 flex flex-col gap-6 items-center">
        <h2 className="text-xl font-bold text-center">–ù–∞–ø–∏—à–∏ —ç—Ç—É –º—ã—Å–ª—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å</h2>
        <Textarea
          placeholder="–ß—Ç–æ —Ç–µ–±—è —Ç—Ä–µ–≤–æ–∂–∏—Ç?"
          className="w-full max-w-sm"
          value={thoughtText}
          onChange={(e) => setThoughtText(e.target.value)}
        />
        <Button onClick={() => {
          setActivityLog((prev) => [...prev, { time: new Date().toLocaleTimeString(), text: "–ó–∞–ø–∏—Å–∞–Ω–∞ —Ç—Ä–µ–≤–æ–∂–Ω–∞—è –º—ã—Å–ª—å" }]);
          setStep("micro_thought_done");
        }}>–ì–æ—Ç–æ–≤–æ</Button>
        <Button variant="link" onClick={() => setStep("microplan")}>–ù–∞–∑–∞–¥</Button>
      </div>
    );
  }

  if (step === "micro_thought_done") {
    return (
      <div className="p-6 flex flex-col items-center text-center gap-4">
        <p className="text-lg">–ò–Ω–æ–≥–¥–∞ –ø—Ä–æ—Å—Ç–æ –¥–∞—Ç—å –µ–π –º–µ—Å—Ç–æ ‚Äî —É–∂–µ –æ–±–ª–µ–≥—á–µ–Ω–∏–µ.</p>
        <Button onClick={() => setStep("result")}>–î–∞–ª—å—à–µ</Button>
      </div>
    );
  }

  if (step === "micro_timer") {
    return (
      <div className="p-6 flex flex-col gap-4 items-center text-center">
        <h2 className="text-xl font-bold">–°—É–ø–µ—Ä. –°–¥–µ–ª–∞–π —ç—Ç–æ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å. –ú—ã –ø–æ–¥–æ–∂–¥—ë–º ‚ú®</h2>
        {!microStarted ? (
          <Button onClick={() => {
            setMicroStarted(true);
            setMicroTimer(60);
          }}>–ù–∞—á–∞—Ç—å</Button>
        ) : (
          <>
            <div className="text-4xl font-bold text-purple-600">{microTimer}</div>
            <Button onClick={() => {
              setMicroTimer(1);
              setActivityLog((prev) => [...prev, { time: new Date().toLocaleTimeString(), text: "–í—ã–ø–æ–ª–Ω–µ–Ω –º–∏–∫—Ä–æ-–ø–ª–∞–Ω" }]);
              setStep("result");
            }} className="mt-2">–ó–∞–≤–µ—Ä—à–∏—Ç—å</Button>
          </>
        )}
        {microTimer === 0 && (
          <>
            <p className="text-sm mt-4">–£–¥–∞–ª–æ—Å—å –ª–∏ —Ç–µ–±–µ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å?</p>
            <div className="flex gap-4">
              <Button onClick={() => setStep("result")}>–î–∞</Button>
              <Button onClick={() => setStep("result")}>–ù–µ—Ç</Button>
            </div>
          </>
        )}
        <Button variant="link" onClick={() => setStep("microplan")}>–ù–∞–∑–∞–¥</Button>
      </div>
    );
  }

  if (step === "selftalk") {
    return (
      <div className="p-6 flex flex-col gap-4 items-center">
        <h2 className="text-xl font-bold">–°–∫–∞–∂–∏ —Å–µ–±–µ —á—Ç–æ-—Ç–æ –¥–æ–±—Ä–æ–µ</h2>
        <div className="flex flex-col gap-2 w-full max-w-sm">
          <Button variant="outline" onClick={() => setSelfTalkText("–ú–Ω–µ —Ç—è–∂–µ–ª–æ ‚Äî –∏ —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ")}>–ú–Ω–µ —Ç—è–∂–µ–ª–æ ‚Äî –∏ —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ</Button>
          <Button variant="outline" onClick={() => setSelfTalkText("–Ø –Ω–µ –æ–±—è–∑–∞–Ω –≤—Å—ë —Ä–µ—à–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å")}>–Ø –Ω–µ –æ–±—è–∑–∞–Ω –≤—Å—ë —Ä–µ—à–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å</Button>
          <Button variant="outline" onClick={() => setSelfTalkText("–Ø —á—É–≤—Å—Ç–≤—É—é —Ç—Ä–µ–≤–æ–≥—É, –Ω–æ —ç—Ç–æ –Ω–µ –≤—Å—è —è")}>–Ø —á—É–≤—Å—Ç–≤—É—é —Ç—Ä–µ–≤–æ–≥—É, –Ω–æ —ç—Ç–æ –Ω–µ –≤—Å—è —è</Button>
          <Button variant="outline" onClick={() => setSelfTalkText("–Ø –¥–µ–ª–∞—é, —á—Ç–æ –º–æ–≥—É, –∏ —ç—Ç–æ–≥–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ")}>–Ø –¥–µ–ª–∞—é, —á—Ç–æ –º–æ–≥—É, –∏ —ç—Ç–æ–≥–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ</Button>
          <Textarea
            placeholder="–°–≤–æ–π —Ç–µ–∫—Å—Ç..."
            className="mt-2"
            value={selfTalkText}
            onChange={(e) => setSelfTalkText(e.target.value)}
          />
        </div>
        <Button onClick={() => {
          setActivityLog((prev) => [...prev, { time: new Date().toLocaleTimeString(), text: "–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ" }]);
          setStep("result");
        }}>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</Button>
        <Button variant="link" onClick={handleBack}>–ù–∞–∑–∞–¥</Button>
      </div>
    );
  }

  return (
    <div className="p-6 flex flex-col items-center gap-6">
      {activityLog.length > 0 && (
        <div className="text-left w-full max-w-sm text-sm overflow-y-auto max-h-40 pr-2">
          <h3 className="font-semibold mb-2">–°–µ–≥–æ–¥–Ω—è:</h3>
          <ul className="space-y-1">
            {activityLog.map((item, index) => (
              <li key={index}>
                ‚Ä¢ [{item.time}] {item.text}
              </li>
            ))}
          </ul>
        </div>
      )}
      <div className="text-center">
        <h1 className="text-2xl font-bold">–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AnxTrack</h1>
        <p className="text-gray-500 mt-2">–≠—Ç–æ —Ç–≤–æ–π –ª–∏—á–Ω—ã–π —Ç—Ä–µ–∫–µ—Ä —Ç—Ä–µ–≤–æ–≥–∏.<br/>–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ —á—É–≤—Å—Ç–≤—É–µ—à—å —Ç—Ä–µ–≤–æ–≥—É.</p>
      </div>

      <Button className="w-full max-w-xs h-12 text-lg" onClick={() => setStep("support")}>–ú–Ω–µ —Ç—Ä–µ–≤–æ–∂–Ω–æ</Button>

      <Button variant="outline" className="mt-10 w-full max-w-xs">–ú–æ—è —Ç—Ä–µ–≤–æ–≥–∞</Button>
    </div>
  );
}
